generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../generated/zod"
  prismaClientPath = "../client"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model CacheEntry {
  key       String   @id @db.VarChar(512)
  value     String   @db.LongText
  updatedAt DateTime @updatedAt
}

model Repository {
  // Corresponds to GitHub's id; necessary to keep as linkage to Qdrant
  id          Int    @id /// z.number().int().min(0) 
  owner       String @db.VarChar(100) /// z.string().min(1).max(100)
  name        String @db.VarChar(100) /// z.string().min(1).max(100)
  description String @db.VarChar(500) /// z.string().min(0).max(500)
  readme      String @db.VarChar(2000) /// z.string().min(0).max(2000)

  url                   String     @db.VarChar(256) /// z.string().url()
  impactScore           Float /// z.number().float().positive().min(0).max(1)
  numStars              Int /// z.number().int().positive().min(0)
  numIssues             Int /// z.number().int().positive().min(0)
  numGoodFirstIssues    Int /// z.number().int().positive().min(0)
  lastActivityTimestamp DateTime /// z.date().min(new Date(2000, 1, 1))
  topics                Topic[]
  languages             Language[]

  updatedAt DateTime @default(now()) @updatedAt
}

model Topic {
  name         String       @id @db.VarChar(100) /// z.string().min(1).max(100)
  updatedAt    DateTime     @default(now()) @updatedAt
  repositories Repository[]
}

model Language {
  id           String     @id @default(uuid()) /// z.number().int().min(0)
  name         String     @db.VarChar(100) /// z.string().min(1).max(100)
  lines        Int /// z.number().int().positive().min(0)
  Repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId Int

  @@index([repositoryId], name: "repositoryId")
}
